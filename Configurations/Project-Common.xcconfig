//
// This file defines common settings that should be enabled for every new
// project. Typically, you want to use Debug, Release, or a similar variant
// instead.
//

#include "Project-Version.xcconfig"

// Disable legacy-compatible header searching
ALWAYS_SEARCH_USER_PATHS = NO

// Whether to warn when a floating-point value is used as a loop counter
CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER = YES

// Whether to warn about use of rand() and random() being used instead of arc4random()
CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES

// Whether to warn about strcpy() and strcat()
CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY = YES

// C++ Language Dialect
//
// GNU++11: Accept the ISO C++ 2011 standard with amendments and GNU extensions.
CLANG_CXX_LANGUAGE_STANDARD = gnu++11

// C++ Standard Library
//
// libc++: highly optimized C++ standard library that works only with the LLVM Compiler,
// and is designed to support new C++11 features.
CLANG_CXX_LIBRARY = libc++

// Enable Modules (C and Objective-C)
CLANG_ENABLE_MODULES = YES

// Objective-C Automatic Reference Counting
CLANG_ENABLE_OBJC_ARC = YES

// Warn about declaring the same method more than once within the same @interface.
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES

// Implicit Boolean Conversions
//
// Warn about implicit conversions to boolean values that are suspicious.  For example,
// writing 'if (foo)' with 'foo' being the name a function will trigger a warning.
// [-Wbool-conversion]
CLANG_WARN_BOOL_CONVERSION = YES

// Implicit Constant Conversions
//
// Warn about implicit conversions of constant values that cause the constant value to
// change, either through a loss of precision, or entirely in its meaning.
// [-Wconstant-conversion]
CLANG_WARN_CONSTANT_CONVERSION = YES

// Whether to warn when overriding deprecated methods
CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES

// Warn about direct accesses to the Objective-C 'isa' pointer instead of using a runtime API.
CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR

// Warn about loop bodies that are suspiciously empty.
CLANG_WARN_EMPTY_BODY = YES

// Warn about implicit conversions between different kinds of enum values.
// For example, this can catch issues when using the wrong enum flag as an argument to a function or method.
CLANG_WARN_ENUM_CONVERSION = YES

// Whether to warn on implicit conversions between signed/unsigned types
CLANG_WARN_IMPLICIT_SIGN_CONVERSION = NO

// Warn about implicit conversions between pointers and integers.
// For example, this can catch issues when one incorrectly intermixes using NSNumbers and raw integers.
CLANG_WARN_INT_CONVERSION = YES

// Don't warn about repeatedly using a weak reference without assigning the weak reference to a strong reference. Too many false positives.
CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK = NO

// Warn about classes that unintentionally do not subclass a root class (such as NSObject).
CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR

// Whether to warn on suspicious implicit conversions
CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION = YES

// Warn about potentially unreachable code
CLANG_WARN_UNREACHABLE_CODE = YES

// Code Signing Identity
//
// The name ("common name") of a valid code-signing certificate in a keychain within your
// keychain path.   A missing or invalid certificate will cause a build error.
CODE_SIGN_IDENTITY[sdk=iphoneos*] = iPhone Developer

// Strip Debug Symbols During Copy
//
// Activating this setting causes binary files which are copied during the build (e.g.,
// in a Copy Bundle Resources or Copy Files build phase) to be stripped of debugging
// symbols.  It does not cause the linked product of a target to be stripped (use Strip
// Linked Product for that).
COPY_PHASE_STRIP = NO

// Enable new-world bytecode compilation
ENABLE_BITCODE = NO

// Enable Strict Checking of objc_msgSend Calls
//
// Controls whether objc_msgSend calls must be cast to the appropriate function pointer
// type before being called.
ENABLE_STRICT_OBJC_MSGSEND = YES

// Whether to require objc_msgSend to be cast before invocation
ENABLE_STRICT_OBJC_MSGSEND = YES

// Which C variant to use
GCC_C_LANGUAGE_STANDARD = gnu11

// Whether to enable strict aliasing, meaning that two pointers of different
// types (other than void * or any id type) cannot point to the same memory
// location
GCC_STRICT_ALIASING = YES

// In C, allocate even uninitialized global variables in the data section of the
// object file, rather than generating them as common blocks.
GCC_NO_COMMON_BLOCKS = YES

// Whether to warn about 64-bit values being implicitly shortened to 32 bits
GCC_WARN_64_TO_32_BIT_CONVERSION = YES

// Whether to warn about fields missing from structure initializers (only if
// designated initializers aren't used)
GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS = YES

// Whether to warn about missing function prototypes
GCC_WARN_ABOUT_MISSING_PROTOTYPES = NO

// Whether to warn about implicit conversions in the signedness of the type
// a pointer is pointing to (e.g., 'int *' getting converted to 'unsigned int *')
GCC_WARN_ABOUT_POINTER_SIGNEDNESS = YES

// Whether to warn when the value returned from a function/method/block does not
// match its return type
GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR

// Whether to warn on a class not implementing all the required methods of
// a protocol it declares conformance to
GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL = YES

// Whether to warn when switching on an enum value, and all possibilities are
// not accounted for
GCC_WARN_CHECK_SWITCH_STATEMENTS = YES

// Whether to warn about the use of four-character constants
GCC_WARN_FOUR_CHARACTER_CONSTANTS = YES

// Whether to warn about an aggregate data type's initializer not being fully
// bracketed (e.g., array initializer syntax)
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES

// Whether to warn about missing braces or parentheses that make the meaning of
// the code ambiguous
GCC_WARN_MISSING_PARENTHESES = YES

// Whether to warn about unsafe comparisons between values of different
// signedness
GCC_WARN_SIGN_COMPARE = YES

// Whether to warn about the arguments to printf-style functions not matching
// the format specifiers
GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES

// Warn if a "@selector(...)" expression referring to an undeclared selector is found
GCC_WARN_UNDECLARED_SELECTOR = YES

// Warn if a variable might be clobbered by a setjmp call or if an automatic variable is used without prior initialization.
GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE

// Whether to warn about static functions that are unused
GCC_WARN_UNUSED_FUNCTION = YES

// Whether to warn about labels that are unused
GCC_WARN_UNUSED_LABEL = YES

// Whether to warn about variables that are never used
GCC_WARN_UNUSED_VARIABLE = YES

// OS X Deployment Target
MACOSX_DEPLOYMENT_TARGET = 10.8

// The base SDK to use (if no version is specified, the latest version is
// assumed)
SDKROOT = macosx

// Versioning Name Prefix
VERSION_INFO_PREFIX =

// Versioning System
//
// Apple Generic - Use the current project version setting.
VERSIONING_SYSTEM = apple-generic

// Don't treat unknown warnings as errors, disable GCC compatibility
// warnings, and disable unused static const variable warnings
WARNING_CFLAGS = -Wno-error=unknown-warning-option -Wno-gcc-compat -Wno-unused-const-variable
